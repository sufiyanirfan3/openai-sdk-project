/**
 * OpenAI APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, nullable, object, optional, Schema, string } from '../schema';
import { Hyperparameters1, hyperparameters1Schema } from './hyperparameters1';

export interface CreateFineTuneRequest {
  /** The ID of an uploaded file that contains training data.See [upload file](https://platform.openai.com/docs/api-reference/files/upload) for how to upload a file.Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.See the [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning) for more details. */
  trainingFile: string;
  /** The ID of an uploaded file that contains validation data.If you provide this file, the data is used to generate validationmetrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file.The same data should not be present in both train and validation files. Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.See the [fine-tuning guide](https://platform.openai.com/docs/guides/fine-tuning) for more details. */
  validationFile?: string | null;
  /**
   * The name of the base model to fine-tune. You can select one of "ada",
   * "babbage", "curie", or "davinci". To learn more about these models, see the
   * [Models](https://beta.openai.com/docs/models) documentation.
   */
  model: string;
  hyperparameters?: Hyperparameters1;
  /**
   * A string of up to 40 characters that will be added to your fine-tuned model name.
   * For example, a `suffix` of "custom-model-name" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.
   */
  suffix?: string | null;
}

export const createFineTuneRequestSchema: Schema<CreateFineTuneRequest> = object(
  {
    trainingFile: ['training_file', string()],
    validationFile: ['validation_file', optional(nullable(string()))],
    model: ['model', string()],
    hyperparameters: [
      'hyperparameters',
      optional(lazy(() => hyperparameters1Schema)),
    ],
    suffix: ['suffix', optional(nullable(string()))],
  }
);
