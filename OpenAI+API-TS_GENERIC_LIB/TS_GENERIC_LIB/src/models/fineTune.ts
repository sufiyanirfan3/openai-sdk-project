/**
 * OpenAI APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  lazy,
  nullable,
  number,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import { FineTuneEvent, fineTuneEventSchema } from './fineTuneEvent';
import { OpenAIFile, openAIFileSchema } from './openAIFile';

export interface FineTune {
  /** The object identifier, which can be referenced in the API endpoints. */
  id?: string;
  /** The object type, which is always "fine-tune". */
  object?: string;
  /** The unix timestamp for when the fine-tuning job was created. */
  createdAt?: number;
  /** The unix timestamp for when the fine-tuning job was finished. */
  updatedAt?: number;
  /** The base model that is being fine-tuned. */
  model?: string;
  /** The name of the fine-tuned model that is being created. */
  fineTunedModel?: string | null;
  /** The organization that owns the fine-tuning job. */
  organizationId?: string;
  /** The current status of the fine-tuning job, which can be either `created`, `pending`, `running`, `succeeded`, `failed`, or `cancelled` */
  status?: string;
  /** The hyperparameters used for the fine-tuning job. */
  hyperparams?: unknown;
  /** The list of files used for training. */
  trainingFiles?: OpenAIFile[];
  /** The list of files used for validation. */
  validationFiles?: OpenAIFile[];
  /** The compiled results files for the fine-tuning job. */
  resultFiles?: OpenAIFile[];
  /** The list of events that have been observed in the lifecycle of the FineTune job. */
  events?: FineTuneEvent[];
}

export const fineTuneSchema: Schema<FineTune> = object({
  id: ['id', optional(string())],
  object: ['object', optional(string())],
  createdAt: ['created_at', optional(number())],
  updatedAt: ['updated_at', optional(number())],
  model: ['model', optional(string())],
  fineTunedModel: ['fine_tuned_model', optional(nullable(string()))],
  organizationId: ['organization_id', optional(string())],
  status: ['status', optional(string())],
  hyperparams: ['hyperparams', optional(unknown())],
  trainingFiles: [
    'training_files',
    optional(array(lazy(() => openAIFileSchema))),
  ],
  validationFiles: [
    'validation_files',
    optional(array(lazy(() => openAIFileSchema))),
  ],
  resultFiles: ['result_files', optional(array(lazy(() => openAIFileSchema)))],
  events: ['events', optional(array(lazy(() => fineTuneEventSchema)))],
});
