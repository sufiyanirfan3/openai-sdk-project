/**
 * OpenAI APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  lazy,
  nullable,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { Hyperparameters1, hyperparameters1Schema } from './hyperparameters1';
import { OpenAIFile, openAIFileSchema } from './openAIFile';

export interface FineTuning {
  /** The object identifier, which can be referenced in the API endpoints. */
  id?: string;
  /** The object type, which is always "fine_tuning.job". */
  object?: string;
  /** The unix timestamp for when the fine-tuning job was created. */
  createdAt?: number;
  /** The unix timestamp for when the fine-tuning job was finished. */
  finishedAt?: number;
  /** The base model that is being fine-tuned. */
  model?: string;
  /** The name of the fine-tuned model that is being created. */
  fineTunedModel?: string | null;
  /** The organization that owns the fine-tuning job. */
  organizationId?: string;
  /** The current status of the fine-tuning job, which can be either `created`, `pending`, `running`, `succeeded`, `failed`, or `cancelled` */
  status?: string;
  hyperparameters?: Hyperparameters1;
  /** The file ID used for training. */
  trainingFiles?: string;
  /** The file ID used for validation. */
  validationFiles?: string | null;
  /** The compiled results files for the fine-tuning job. */
  resultFiles?: OpenAIFile[];
  /** The total number of billable tokens processed by this fine tuning job. */
  trainedTokens?: number;
}

export const fineTuningSchema: Schema<FineTuning> = object({
  id: ['id', optional(string())],
  object: ['object', optional(string())],
  createdAt: ['created_at', optional(number())],
  finishedAt: ['finished_at', optional(number())],
  model: ['model', optional(string())],
  fineTunedModel: ['fine_tuned_model', optional(nullable(string()))],
  organizationId: ['organization_id', optional(string())],
  status: ['status', optional(string())],
  hyperparameters: [
    'hyperparameters',
    optional(lazy(() => hyperparameters1Schema)),
  ],
  trainingFiles: ['training_files', optional(string())],
  validationFiles: ['validation_files', optional(nullable(string()))],
  resultFiles: ['result_files', optional(array(lazy(() => openAIFileSchema)))],
  trainedTokens: ['trained_tokens', optional(number())],
});
